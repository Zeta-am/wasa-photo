openapi: 3.0.0
info:
  title: WASAPhoto
  description: |
    OpenAPI document for the WASAPhoto application
  version: 1.0.2  
paths:   
  /users/:
    post:
      tags: ["users"]
      summary: Logs in the user
      description: |
        If the user does not exist, it will be created, and an identifier is returned.
        If the user exist the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User detail (the username)
        content:
          application/json:
            schema:
              description: The username of the current user to login
              type: object
              properties:
                request:
                  $ref: "#/components/schemas/Username"
        required: true      
      responses:
        "200":
          $ref: "#/components/responses/OK"
        "201":
          $ref: "#/components/responses/Created"
        "400": 
          $ref: '#/components/responses/BadRequest'
        "401": 
          $ref: '#/components/responses/Unauthorized'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security: [] 
  /users/{idUser}:
    parameters:
        - $ref: "#/components/parameters/idUser"
    get:
      tags: ["users"]
      summary: Get the user's profile
      description: Return the profile of a user
      operationId: getUserProfile
      responses:
        "200":
          $ref: "#/components/responses/OK"
        "400": 
          $ref: '#/components/responses/BadRequest'
        "401": 
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
  /users/{idUser}/stream:
    parameters:
      - $ref: "#/components/parameters/idUser"
    get:
      tags: ["users"]
      summary: Get my stream
      description: |
        Get my post stream. It will contains post of my followers, in reverse chronological order
      operationId: getMyStream
      responses:
        "200": 
          $ref: "#/components/responses/OK" 
        "400": 
          $ref: '#/components/responses/BadRequest'
        "401": 
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
  /users/{idUser}/followers:
    parameters:
      - $ref: "#/components/parameters/idUser"
    get:
      tags: ["follows"]
      summary: List all the followers
      operationId: listFollowers
      description: |
        This method allow to list all the followers of the specified user
      responses:
        "200":  
          $ref: "#/components/responses/OK" 
        "400": 
          $ref: '#/components/responses/BadRequest'
        "401": 
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
  /users/{idUser}/followings:
    parameters:
      - $ref: "#/components/parameters/idUser"
    get:
      summary: List following users
      description: |
        List all the following of a specific user
      tags: ["follows"]
      operationId: listFollowings
      responses:
        "200": 
          $ref: "#/components/responses/OK" 
        "400": 
          $ref: '#/components/responses/BadRequest'
        "401": 
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
  /users/{idUser}/followings/{idFollowed}:
    parameters:
      - $ref: "#/components/parameters/idUser"
      - $ref: "#/components/parameters/idFollowed"
    put:
      summary: Follow a user
      description: |
        Add the user that you want to follow into list of following
      tags: ["follows"]
      operationId: followUser
      responses:
        "200":
          $ref: "#/components/responses/OK" 
        "201":
          $ref: "#/components/responses/Created" 
        "400": 
          $ref: '#/components/responses/BadRequest'
        "401": 
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Unfollow a user
      description: |
        Remove a user that you want to unfollow from the list of following
      operationId: unfollowUser
      tags: ["follows"]
      responses:
        "204":
          description: You are not following this user anymore
        "400": 
          $ref: '#/components/responses/BadRequest'
        "401": 
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
  /users/{idUser}/edit:
    parameters:
      - $ref: "#/components/parameters/idUser"
    put:
      tags: ["users"]
      summary: Change the username
      description: Set a new username
      operationId: setMyUsername
      requestBody:
        description: The new username
        content:
          application/json:
            schema:
              description: The new username
              type: object
              properties:
                username:
                  $ref: "#/components/schemas/Username"
        required: true
      responses:
        "200":
          description: Username updated
          content:
            application/json:
              schema:
                description: The new username
                type: object
                properties:
                  username:
                    $ref: "#/components/schemas/Username"
        "400": 
          $ref: '#/components/responses/BadRequest'
        "401": 
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
  /users/{idUser}/banList:
    parameters:
      - $ref: "#/components/parameters/idUser"
    get:
      tags: ["bans"]
      operationId: getBannedList
      summary: Gets the list of user banned
      description: Gets the list of all users banned by the user idUser
      responses:
        "200":
          $ref: "#/components/responses/OK"
        "400": 
          $ref: '#/components/responses/BadRequest'
        "401": 
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
  /users/{idUser}/banList/{idUserBlocked}:
    parameters:
      - $ref: "#/components/parameters/idUser"
      - $ref: "#/components/parameters/idUserBlocked"
    put:
      tags: ["bans"]
      operationId: banUser
      summary: Ban a user
      description: Ban another user ( banning someone will also make him unfollow you )
      responses:
        "200":
          $ref: "#/components/responses/OK"
        "201":
          $ref: "#/components/responses/Created"
        "400":  
          $ref: "#/components/responses/BadRequest" 
        "401": 
          $ref: '#/components/responses/Unauthorized'
        "404": 
           $ref: "#/components/responses/NotFound" 
        "409":
           $ref: "#/components/responses/Conflict" 
        "500": 
          $ref: "#/components/responses/InternalServerError" 
    delete:
      tags: ["bans"]
      operationId: unbanUser
      summary: Unban a user
      description: |
        Unban a previously banned user.
        You are only allowed to unban users for yourself.
      responses:
        "200":
          $ref: "#/components/responses/OK"
        "400": 
          $ref: "#/components/responses/BadRequest" 
        "401": 
          $ref: '#/components/responses/Unauthorized'
        "500": 
          $ref: "#/components/responses/InternalServerError" 
  /users/{idUser}/posts:
    parameters:
      - $ref: "#/components/parameters/idUser"
    post:
      tags: ["photos"]
      summary: Upload a photo
      operationId: uploadPhoto
      parameters:
        - name: caption
          in: query
          description: Optional description
          required: true
          schema:
            $ref: "#/components/schemas/Message"

      requestBody:
        description: The binary image file of the photo
        content:
          image/*:    # Accept all type of images
            schema:
              $ref: "#/components/schemas/Image"
      responses:
        "201":
          description: The post was created
          content:
            application/json:
              schema:
                description: The post created
                type: object
                properties:
                  post:
                    $ref: "#/components/schemas/Post"
        "400": 
          $ref: '#/components/responses/BadRequest'
        "401": 
          $ref: '#/components/responses/Unauthorized'
        "500":
          $ref: "#/components/responses/InternalServerError" 
  /users/{idUser}/posts/{idPhoto}:
    parameters:
      - $ref: "#/components/parameters/idUser"
      - $ref: "#/components/parameters/idPhoto"
    delete:
      tags: ["photos"]
      summary: Delete a photo
      description: Delete an existing photo
      operationId: deletePhoto
      responses:
        "204":
          description: Your photo has been deleted
        "400": 
          $ref: "#/components/responses/BadRequest" 
        "401": 
          $ref: '#/components/responses/Unauthorized'
        "500": 
           $ref: "#/components/responses/InternalServerError" 
  /users/{idUser}/posts/{idPhoto}/comments: # TODO GET
    parameters:
      - $ref: "#/components/parameters/idUser"
      - $ref: "#/components/parameters/idPhoto"
    post:
      tags: ["comments"]
      summary: Post a comment
      operationId: commentPhoto
      requestBody:
        description: The caption of the comment
        content:
          application/json:
            schema:
              description: The caption of the comment posted
              type: object
              properties:
                caption:
                  $ref: "#/components/schemas/Comment/properties/caption"
      responses:
        "200":
          $ref: "#/components/responses/OK" 
        "400": 
          $ref: "#/components/responses/BadRequest" 
        "401": 
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: "#/components/responses/Forbidden"
        "500": 
           $ref: "#/components/responses/InternalServerError" 
    get:
      tags: ["comments"]
      summary: Get comments
      description: Get the list of comments posted by user
      operationId: getComments
      responses:
        "200":
          $ref: "#/components/responses/OK"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /users/{idUser}/posts/{idPhoto}/comments/{idComment}:
    parameters:
      - $ref: "#/components/parameters/idUser"
      - $ref: "#/components/parameters/idPhoto"
      - $ref: "#/components/parameters/idComment"
    delete:
      tags: ["comments"]
      summary: Delete a comment
      operationId: uncommentPhoto
      responses:
        "200":
          $ref: "#/components/responses/OK"
        "400": 
          $ref: "#/components/responses/BadRequest" 
        "401": 
          $ref: '#/components/responses/Unauthorized'
        "500": 
           $ref: "#/components/responses/InternalServerError"
  /users/{idUser}/posts/{idPhoto}/likes: # TODO GET
    parameters:
      - $ref: "#/components/parameters/idUser"
      - $ref: "#/components/parameters/idPhoto"
    put:
      summary: Like a photo
      description: The user put a like on a photo
      operationId: likePhoto
      tags: ["likes"]
      responses:
        "200":
          $ref: "#/components/responses/OK"
        "201":
          $ref: "#/components/responses/Created"
        "400": 
          $ref: "#/components/responses/BadRequest" 
        "401": 
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: "#/components/responses/Forbidden"
        "500": 
           $ref: "#/components/responses/InternalServerError"
    delete:
      summary: Unlike a photo
      description: Remove a like from a photo
      tags: ["likes"]
      operationId: unlikePhoto
      responses:
        "204":
          $ref: "#/components/responses/No content"
        "400": 
          $ref: "#/components/responses/BadRequest" 
        "401": 
          $ref: '#/components/responses/Unauthorized'
        "404": 
          $ref: "#/components/responses/NotFound" 
        "500":
          $ref: "#/components/responses/InternalServerError" 
    get:
      summary: Get likes
      description: Get the list of likes put by user
      tags: ["likes"]
      operationId: getLikes
      responses:
        "200":
          $ref: "#/components/responses/OK"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401": 
          $ref: '#/components/responses/Unauthorized'
        "404": 
          $ref: "#/components/responses/NotFound" 
        "500":
          $ref: "#/components/responses/InternalServerError" 

components:
  schemas:  
    Image:
      title: Image
      description: This object represents a single image (as binary of maximum size 20MB)
      type: string
      format: binary
      minLength: 1
      maxLength: 20971520
    Post:
      title: Post
      description: This object represent a single post, with all the related informations
      type: object
      properties:
        id:
          description: The ID of the post
          type: integer
          readOnly: true
          example: 100
        image:
          $ref: "#/components/schemas/Image"
        user-id:
          $ref: "#/components/schemas/User/properties/id"
        username:
          $ref: "#/components/schemas/Username"
        like-numbers:
          description: Number of likes of this post
          type: integer
          minimum: 0
          example: 100
        comment-numbers:
          description: Number of commments of this post
          type: integer
          minimum: 0
          example: 20 
        upload-time:
          $ref: "#/components/schemas/DateTime"
        liked:
          description: If the post is liked
          type: boolean
          example: true
    User:
      title: User
      description: |
        This object reperesents all the info related to a user
      type: object
      properties:
        id:
          description: The ID of the user
          type: integer
          readOnly: true
          example: 100
        name:
          description: User's name
          type: string
          pattern: '^.*?$'
          minLength: 2
          maxLength: 52
          example: Andrea
        surname:
          description: User's surname
          type: string
          pattern: '^.*?$'
          minLength: 2
          maxLength: 52
          example: Rossi
        username:
          $ref: "#/components/schemas/Username"
        postNo:
          description: The number of post
          type: integer
          minimum: 0
          example: 200
        followerNo:
          description: The number of follower
          type: integer
          minimum: 0
          example: 25
        followingNo:
          description: The number of followed
          type: integer
          minimum: 0
          example: 10
        followed:
          description: If the user is followed
          type: boolean
          example: false
    Username:
      title: Username
      description: This object represent the user name
      type: object
      properties:
        name:
          description: The username
          type: string
          pattern: '^[a-zA-Z0-9_\.#$]+$'
          minLength: 3
          maxLength: 16
          example: andremuso
    Comment:
      title: Comment
      description: This object represent a comment on a post
      type: object
      properties:
        id:
          description: The ID of the comment
          type: integer
          readOnly: true
          example: 100
        userId:
          $ref: "#/components/schemas/User/properties/id"
        photoId:
          $ref: "#/components/schemas/Post/properties/id"
        upload-time:
          $ref: "#/components/schemas/DateTime"
        caption:
          type: string
          pattern: 'ˆ\S+$'
          example: Wow!!!
          minLength: 1
          maxLength: 200
    Like:
      title: Like
      description: This schema represent a like on a photo
      type: object
      readOnly: true
      properties:
        userId:
          $ref: "#/components/schemas/User/properties/id"
        photoId:
          $ref: "#/components/schemas/Post/properties/id"
    DateTime:
      title: DateTime
      description: This object reperesents the date and time
      type: object
      readOnly: true
      properties:
        date-time:
          type: string
          format: date-time
          minLength: 20
          maxLength: 20
          example: 2017-07-21T17:32:28Z
    Message:
      title: Message
      description: This object represent a generic description of a message
      type: object
      readOnly: true
      properties:
        error:
          type: string
          pattern: 'ˆ\S.+$'
          example: The username is already taken
          minLength: 0
          maxLength: 200

  parameters:
    idPhoto:
      name: idPhoto
      in: path
      schema:
        $ref: "#/components/schemas/Post/properties/id"
      required: true
      description: The id of a photo
    idUser:
      name: idUser
      in: path
      schema: 
        $ref: "#/components/schemas/User/properties/id" 
      required: true
      description: The id of a user
    idComment:
      name: idComment
      in: path
      description: The id of a comment
      required: true
      schema: 
        $ref: "#/components/schemas/Comment/properties/id" 
    idFollowed:
      name: idFollowed
      in: path
      description: The id of a user to follow
      required: true
      schema: 
        $ref: "#/components/schemas/User/properties/id" 
    idUserBlocked:
      name: idUserBlocked
      in: path
      description: The id of a user to block
      required: true
      schema:  
        $ref: "#/components/schemas/User/properties/id" 

  responses:
    OK: # 200
      description: 
        The request succeeded
      content:
        application/json:
          schema:
            description: The message of the error
            type: object
            properties:
              err:
                $ref: "#/components/schemas/Message"
    Created:  # 201
      description: 
        The request succeeded, and a new resource was created as a result
      content:
        application/json:
          schema:
            type: object
            description: The message of the error
            properties:
              err:
                $ref: "#/components/schemas/Message"
    No content: # 204
      description:
        The server successfully processed the request, and is not returning any content.
      content:
        application/json:
          schema:
            type: object
            description: The message of the error
            properties:
              err:
                $ref: "#/components/schemas/Message"
    BadRequest: # 400
      description: |
        The request sent to the server is invalid (e.g. malformed request syntax, invalid request message framing, ...)
      content:
        application/json:
          schema:
            type: object
            description: The message of the error
            properties:
              err:
                $ref: "#/components/schemas/Message"
    Unauthorized: # 401
      description: 
        The request was not successful because it lacks valid authentication credentials for the requested resource
      content:
        application/json:
          schema:
            type: object
            description: The message of the error
            properties:
              err:
                $ref: "#/components/schemas/Message"
    Forbidden:  # 403
      description: 
        Access denied. You do not have the permission to access this resource or perform this action
      content:
        application/json:
          schema:
            description: The message of the error
            type: object
            properties:
              err:
                $ref: "#/components/schemas/Message"
    NotFound: # 404
      description: |
        The resource you are trying to access doesn't exist
      content:
        application/json:
          schema: 
            type: object
            description: The message of the error
            properties:
              err:
                $ref: "#/components/schemas/Message"
    NotAcceptable:  # 406
      description: |
        The server is unable to provide a response that matches the client's requested format
      content:
        application/json:
          schema:
            type: object
            description: The message of the error
            properties:
              err:
                $ref: "#/components/schemas/Message"
    Conflict: # 409
      description: This response is sent when a request conflicts with the current state of the server
      content:
        application/json:
          schema:
            type: object
            description: The message of the error
            properties:
              err: 
                $ref: "#/components/schemas/Message"
    InternalServerError:  #500
      description: The server encounter an unexpected error
      content:
        application/json:
          schema:
            type: object
            description: The message of the error
            properties:
              err:
                $ref: "#/components/schemas/Message"    

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer

# Apply the security global, to all the operations
security:
  - bearerAuth: []

tags:
  - name: users
    description: Users related operations
  - name: photos
    description: Photos related operations
  - name: follows
    description: Follows related operations
  - name: bans
    description: Bans related operations
  - name: comments
    description: Comments related operations
  - name: likes
    description: Likes related operations